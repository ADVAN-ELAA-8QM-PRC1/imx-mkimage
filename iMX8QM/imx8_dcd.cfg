/*
 * Copyright (C) 2016 Freescale Semiconductor, Inc.
 *
 * SPDX-License-Identifier:	GPL-2.0+
 *
 * Refer doc/README.imximage for more details about how-to configure
 * and create imximage boot image
 *
 * The syntax is taken as close as possible with the kwbimage
 */
/* image version */

#define __ASSEMBLY__

/* C header files modified with the expand_c_define.sh script from
   source files in 
   ../../imx-sc-firmware/firmware/platform/board/mx8qm_val/ddrc/)
*/
#include <ddrc_mem_map.h>
#include <ddr_phy_mem_map.h>

/*
 * Device Configuration Data (DCD)
 *
 * Each entry must have the format:
 * Addr-type           Address        Value
 *
 * where:
 *	Addr-type register length (1,2 or 4 bytes)
 *	Address	  absolute address of the register
 *	value	  value to be stored in the register
 */

/* from file: imx-sc-firmware/firmware/platform/board/mx8qm_val/ddrc/ss_drc_lpddr4_init_zebu.c mx8qm_val/ddrc/ss_drc_lpddr4_init_zebu.c */
/* copy/paste from ddrc_init() */

/* DRAM 0 controller configuration begin */
/* Program the umctl2 registers */

/* ddrc_lpddr4_init(inst) */
/* ddrc_lpddr4_init - DRAM controller initialization */
  // This is for lpddr4 controller 800MHz and ddr 1600MHz
DATA 4 DDRC_MSTR_0 0xC3080020   // Set LPDDR4, BL = 16 and active ranks
DATA 4 DDRC_RFSHTMG_0 0x006100E0   // tREFI, tRFC
  // CAST32(DDRC_INIT0_0 0x4002061A   // skip_dram_init, post_cke, pre_cke
DATA 4 DDRC_INIT0_0 0x40020010   // pre_cke = 2ms is too long - LPDDR4 model hacked for 20us
  // CAST32(DDRC_INIT1_0 0x009d0000   // dram_rstn = 200us;
DATA 4 DDRC_INIT1_0 0x00100000   // dram_rstn - LPDDR4 model hacked for 20us;
DATA 4 DDRC_INIT3_0 0x0054002d   // MR1=0x54: nWR=30 BL=16;  MR2=0x2d: RL=28 WL=14
DATA 4 DDRC_INIT4_0 0x00310000   // MR3, MR13
DATA 4 DDRC_RANKCTL_0 0x000006cf   // diff_rank_wr_gap, diff_rank_rd_gap, max_rank_rd
DATA 4 DDRC_DRAMTMG0_0 0x1a201b22   // wr2pr, tFAW, tRASmax, tRASmin
DATA 4 DDRC_DRAMTMG1_0 0x00060633   // tXP, rd2pre, tRC
DATA 4 DDRC_DRAMTMG2_0 0x070E1113   // WL, RL, rd2wr, wr2rd
DATA 4 DDRC_DRAMTMG3_0 0x0170c00c   // tmrw, tmrd, tmod
DATA 4 DDRC_DRAMTMG4_0 0x0f04080F   // trcd, tccd, trrd, trp
DATA 4 DDRC_DRAMTMG5_0 0x03040C0C   // tcksrx, tcksre?, tckesr, tcke
DATA 4 DDRC_DRAMTMG6_0 0x02020007   // tckdpde, tckdpdx, tckcsx
DATA 4 DDRC_DRAMTMG7_0 0x00000401   // tckpde?, tckpdx
DATA 4 DDRC_DRAMTMG12_0 0x00020610   // tCMDCKE, tCKEHCMD (=tXP?)
DATA 4 DDRC_DRAMTMG13_0 0x0c100002   // tODTLoff, tCCDMW, tPPD
DATA 4 DDRC_DRAMTMG14_0 0x000000E6   // txsr
DATA 4 DDRC_ZQCTL0_0 0x03200018   // tZQCAL, tZQLAT
DATA 4 DDRC_ZQCTL1_0 0x02800100   // tZQReset, tzq_short_interval
DATA 4 DDRC_DFITMG0_0 0x049C820C   // dfi_t_ctrl_delay, dfi_t_rddata_en, dfi_tphy_wrdata, dfi_tphy_wrlat
DATA 4 DDRC_DFITMG1_0 0x00060303   // dfi_t_wrdata_delay, dfi_t_dram_clk_disable, dfi_t_dram_clk_enable
DATA 4 DDRC_DFITMG2_0 0x00001A0A   // dfi_tphy_rdcslat, dfi_tphy_wrcslat
DATA 4 DDRC_DFIMISC_0 0x00000005   // dfi_data_cs_polarity
DATA 4 DDRC_DFIUPD0_0 0x80400003   // Disable the automatic dfi_ctrlupd_req generation
DATA 4 DDRC_DFIUPD1_0 0x00010002   // dfi_ctrlupd_req generation interval generation (min and max)
DATA 4 DDRC_DFIUPD2_0 0x80000000   // dfi_phyupd_en
DATA 4 DDRC_ADDRMAP0_0 0x00000017   // addrmap_cs_bit0
#ifdef DISABLE_DDRC_BANK_INTERLEAVE
DATA 4 DDRC_ADDRMAP1_0 0x00181818   // addrmap_bank_b2, addrmap_bank_b1, addrmap_bank_b0
DATA 4 DDRC_ADDRMAP5_0 0x04040404   // addrmap_row_b11, addrmap_row_b10_b2, addrmap_row_b1, addrmap_row_b0
DATA 4 DDRC_ADDRMAP6_0 0x04040404   // addrmap_row_b15, addrmap_row_b14, addrmap_row_b13, addrmap_row_b12
#else
DATA 4 DDRC_ADDRMAP1_0 0x00080808   // addrmap_bank_b2, addrmap_bank_b1, addrmap_bank_b0
DATA 4 DDRC_ADDRMAP5_0 0x07070707   // addrmap_row_b11, addrmap_row_b10_b2, addrmap_row_b1, addrmap_row_b0
DATA 4 DDRC_ADDRMAP6_0 0x07070707   // addrmap_row_b15, addrmap_row_b14, addrmap_row_b13, addrmap_row_b12
#endif
  //CAST32(DDRC_ODTCFG_0 0x0a020b28   // wr_odt_hold, wr_odt_delay, rd_odt_hold, rd_odt_delay
DATA 4 DDRC_ODTMAP_0 0x00002211   // rank[3:0]_wr_odt, rank[3:0]_wr_odt

DATA 4 DDRC_PCTRL_0_0 0x00000001   // Enable port 0

  // In prevision of low frequency switch. DFITMG0.xxx_use_sdr fields can only
  // be written when controller is under reset.
DATA 4 DDRC_DFITMG0_SHADOW_0 0x00808000

    /* Set DFIMISC.dfi_init_complete_en to 0 to avoid controller init
       sequence to start after reset release */
CLR_BIT 4 DDRC_DFIMISC_0 0x00000001
    // As DRAM init sequence will be run by controller set 0x0 to skip_dram_init field
CLR_BIT 4 DDRC_INIT0_0 0xC0000000

 /* DDR %u PHY initialization begin... */
    /* Launch DDR PHY PLLINIT, DCAL and ZCAL */
    /* ddr_phy_lpddr4_phy_init(inst); */

  /* ddr_phy_lpddr4_phy_init - PHY initialization */

  //-------------------------------------------
  // Configure registers for PHY initialization
  // Timings are computed for a PHY at 800MHz (DRAM at 1600MHz)
  //-------------------------------=------------

  // Set-up DRAM Configuration Register
DATA 4 DDR_PHY_DCR_0 0x0000040D   // LPDDR4 selection with 8 bank

  // Set-up PHY General Configuration Register
  // PGCR0,1,4,5,6,7 are untouched
DATA 4 DDR_PHY_PGCR2_0 0x00F0DA09   // Set tREFPRD (9*3.904us)
DATA 4 DDR_PHY_PGCR3_0 0x050A1080   // CKEN/CKNEN toggling and polarity

  // Set-up PHY Timing Register
  // PTR2 is untouched
DATA 4 DDR_PHY_PTR0_0 0x64032010   // tPLLPD, tPLLGS, tPHYRST
  // CAST32(DDR_PHY_PTR1(ddr_num))    = 0x4E201C20;   // tPLLLOCK=25us, tPLLRST=9us
DATA 4 DDR_PHY_PTR1_0 0x0D701C20   // tPLLLOCK reduced to 4.3us, tPLLRST=9us

  // Set-up PLL Control Register
DATA 4 DDR_PHY_PLLCR0_0 0x08000000   // FREQSEL=8
DATA 4 DDR_PHY_DX8SLbPLLCR0_0 0x08000000

  // Set-up Impedance Control Register
DATA 4 DDR_PHY_ZQCR_0 0x001FEC58   // Set ODT_MODE=0b10(LPDDR4 stype pullup)

  // Set-up Impedance Controller Program Register
  // ZQnPR0, ZQnPR1 are untouched, lpddr4 PD_REFSEL should not be default value, FIXME
    /* ddr_phy_launch_init(inst, 0x40); */
  // Set-up PHY Initialization Register
DATA 4 DDR_PHY_PIR_0 0x40

  // Launch initialization (set bit 0)
DATA 4 DDR_PHY_PIR_0 0x41

    /* While PHY initialization is running, registers for DRAM
       initialization can be configured */
    /* ddr_phy_lpddr4_dram_init(inst); */

  /* ddr_phy_lpddr4_dram_init DRAM initialization */

  //-------------------------------------------
  // Configure registers for DRAM initialization
  //-------------------------------------------

  // Set-up Mode Register
  // MR0, MR3, MR4, MR5 MR6 are untouched
DATA 4 DDR_PHY_MR1_0 0x54         // Set BL, WR-PRE, nWR, RPST
DATA 4 DDR_PHY_MR2_0 0x2D         // Set RL=28/WL=14
DATA 4 DDR_PHY_MR3_0 0x31         // Set drive strength to 40 ohms typical pull-down/pull-up

  // Set-up DRAM Timing Parameters Register
  // DTPR6 is untouched
DATA 4 DDR_PHY_DTPR0_0 0x1044220C   // tRRD, tRAS, tRP, tRTP
DATA 4 DDR_PHY_DTPR1_0 0x28408C17   // tWLMRD, tFAW, tODTUP, tMRD
DATA 4 DDR_PHY_DTPR2_0 0x003C01CC   // tRTW, tRTODT, tCMDCKE, tCKE, tXS
DATA 4 DDR_PHY_DTPR3_0 0x01800604   // tODX, tCCD, tDLLK, tDQSCKmax, tDQSCK (FIXME double check tDLLK)
DATA 4 DDR_PHY_DTPR4_0 0x01C0000C   // tRFC, tWLO, tXP
DATA 4 DDR_PHY_DTPR5_0 0x00651D10   // tRC, tRCD, tWTR

  // Set-up PHY Timing Register
  // CAST32(DDR_PHY_PTR3(ddr_num))    = 0x0030D400;   // tDINIT0 - 2ms
DATA 4 DDR_PHY_PTR3_0 0x00007D00   // tDINIT0 - memory model hacked to 20us 
DATA 4 DDR_PHY_PTR4_0 0x00000C90   // tDINIT1 (2000ns)
DATA 4 DDR_PHY_PTR5_0 0x00007D00   // tDINIT2 - normally 200us but memory model hacked to 20us
DATA 4 DDR_PHY_PTR6_0 0x03000641   // tDINIT4 (30ns), tDINIT3 (1us)

  // RDIMMGCR0-2 RDIMMGCR0-4??

  // Set-up DATX8 Common Configuration Register
  // DXCCR is untouched

  // Set-up DDR System General Configuration Register
  // DSGCR is untouched

  // Set-up ODT Configuration Register
  // ODTCR is untouched

  // Set-up Anti-Aging Control Register
  // AACR is untouched

  // Set-up Data Training Address Register
  // DTAR0-3 are untouched
  // !! DTAR3 is not described in spec !!

  // Set-up AC I/O Configuration Register
  // ACIOCR1-4 are untouched
DATA 4 DDR_PHY_ACIOCR0_0 0x30070800   // PNUM2 (i.e.LPDDR4) selection  [10:11] = 0x2
DATA 4 DDR_PHY_ACIOCR5_0 0x09000000   // I/O mode = LPDDR4

  // IOVCR0-1, DXnGCR0-4??, CALBYP

  // Set-up VREF Training Control Registers
DATA 4 DDR_PHY_VTCR0_0 0xF0032019   // CK1, CK0
DATA 4 DDR_PHY_VTCR1_0 0x07F00173   // HVIO=1, SHREN=1, SHRNK=0

  // Set-up DATX8 General Configuration Registers
  // DXnGCR0-4 are untouched

  // Set-up DATX8 DX Control Register 2
DATA 4 DDR_PHY_DX8SLbDXCTL2_0 0x081800    // PREOEX=2tCK, POSOEX=0.5tCK

  // Set-up DATX8 IO Control Register
DATA 4 DDR_PHY_DX8SLbIOCR_0 0x09000000  // I/O mode = LPDDR4

  // Set-up DATX8 DQS Control Register
DATA 4 DDR_PHY_DX8SLbDQSCTL_0 0x013E4091  // DQS resistor

    /* Wait PHY initialization end then advise DDR PHY that DRAM
       init will be done by uMCTL2 */
    /* ddr_phy_wait_init_done(inst); */

  // Wait for bit 0 of PGSR0 to be '1'
CHECK_BITS_SET 4 DDR_PHY_PGSR0_0 0x1 0x1

  // Check that no error occured
  /* [LC] TODO: not sure if this check should be implemented
  if ((CAST32(DDR_PHY_PGSR0(ddr_num)) & 0x7FFC0000) != 0x0) {
    board_print(0, "DDR PHY - Initialization failed !\n");
  }
  */

    /* ddr_phy_launch_init(inst, 0x40000); */

  // Set-up PHY Initialization Register
DATA 4 DDR_PHY_PIR_0 0x40000

  // Launch initialization (set bit 0)
DATA 4 DDR_PHY_PIR_0 0x40001


    /* Wait assertion of DDR PHY PGSR0.IDONE field acknowledging
       that DRAM init will be done by controller */
    /* ddr_phy_wait_init_done(inst); */
  // Wait for bit 0 of PGSR0 to be '1'
CHECK_BITS_SET 4 DDR_PHY_PGSR0_0 0x1 0x1

  // Check that no error occured
  /* [LC] TODO: not sure if this check should be implemented
  if ((CAST32(DDR_PHY_PGSR0(ddr_num)) & 0x7FFC0000) != 0x0) {
    board_print(0, "DDR PHY - Initialization failed !\n");
  }
  */


